{
  "id": "a2297a50-1630-11ea-b83a-ff5a186ef7f6",
  "title": "What if…",
  "content": "<h2>What if…</h2><p>So the first week went smooth, we completed all the tasks and started to work on new features. The project seems so simple that it looked like we could finish it really fast.</p><p>So <strong>what if</strong> we make things a little bit more complex.</p><p>Using a text area and adding markdown was the first approach, but it seems things would be much better if we could integrate an existing text editor. Enter <a href=\"https://prosemirror.net/\">https://prosemirror.net/</a></p><p>The documentation states it’s not meant to be a drop off but rather a toolkit to build rich text editors, it’s very well documented and that’s also daunting <br><br><br></p><blockquote><p><em>“The core library is not an easy drop-in component—we are prioritizing modularity and customizeability over simplicity, with the hope that, in the future, people will distribute drop-in editors based on ProseMirror. As such, this is more of a Lego set than a Matchbox car.”</em></p></blockquote><p>I was expecting to spend a lot of time creating a custom editor (and probably I will in the future) but fortunately they provide an <a href=\"https://github.com/prosemirror/prosemirror-example-setup\" title=\"https://github.com/prosemirror/prosemirror-example-setup\">Example Setup</a></p><p>After that, to get the user html is as simple get the element’s innerHTML:</p><pre><code>    const editor = document.querySelector('#editor &gt; div &gt; div.ProseMirror.ProseMirror-example-setup-style')      \n    const html = editor.innerHTML;</code></pre><p>This sample editor already provides a lot of functionalities and is exactly what this post is using.</p><p><em>to be continued…</em></p>",
  "html": "<h2>What if…</h2><p>So the first week went smooth, we completed all the tasks and started to work on new features. The project seems so simple that it looked like we could finish it really fast.</p><p>So <strong>what if</strong> we make things a little bit more complex.</p><p>Using a text area and adding markdown was the first approach, but it seems things would be much better if we could integrate an existing text editor. Enter <a href=\"https://prosemirror.net/\">https://prosemirror.net/</a></p><p>The documentation states it’s not meant to be a drop off but rather a toolkit to build rich text editors, it’s very well documented and that’s also daunting <br><br><br></p><blockquote><p><em>“The core library is not an easy drop-in component—we are prioritizing modularity and customizeability over simplicity, with the hope that, in the future, people will distribute drop-in editors based on ProseMirror. As such, this is more of a Lego set than a Matchbox car.”</em></p></blockquote><p>I was expecting to spend a lot of time creating a custom editor (and probably I will in the future) but fortunately they provide an <a href=\"https://github.com/prosemirror/prosemirror-example-setup\" title=\"https://github.com/prosemirror/prosemirror-example-setup\">Example Setup</a></p><p>After that, to get the user html is as simple get the element’s innerHTML:</p><pre><code>    const editor = document.querySelector('#editor &gt; div &gt; div.ProseMirror.ProseMirror-example-setup-style')      \n    const html = editor.innerHTML;</code></pre><p>This sample editor already provides a lot of functionalities and is exactly what this post is using.</p><p><em>to be continued…</em></p>\n",
  "fileHtml": "/what-if.html",
  "fileJson": "/what-if.json",
  "created": 1575479098617,
  "author": "me",
  "status": "draft"
}